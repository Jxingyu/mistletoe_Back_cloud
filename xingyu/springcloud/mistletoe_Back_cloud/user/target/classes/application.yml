spring:
  redis:
    host: localhost # Redis服务器地址
    database: 0 # Redis数据库索引（默认为0）
    port: 6379 # Redis服务器连接端口
    password: # Redis服务器连接密码（默认为空）

  application:
    name: user-service
  main:
    allow-bean-definition-overriding: true
  #  security:
  #      user:
  #        name: xingyu
  #        password: 8520
  datasource:
    #数据库地址
    url: jdbc:mysql://localhost:3306/mistletoe?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    #      url=jdbc:mysql://192.168.0.133/mistletoe?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    #数据账号
    username: root
    #数据密码
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
#    application:
#      name: mistletoe_Back_cloud
#  data:
#    elasticsearch:
#      repositories:
#          enabled: true
#    cluster-nodes: 127.0.0.1:9300 # es的连接地址及端口号
#    cluster-name: es # es集群的名称
#    client:
#      reactive:
#        socket-timeout: 16000



jwt:
  #定义我们的盐  密码
  secret: mySecret
  #过期时间
  expiration: 3600
  #token 的类型 说明他以 bearer 开头
  tokenHead: bearer
  #token 对应的 key
  tokenHeader: Authorization
  #  {Authorization: "bearer jghrwg5thfdsfsrr0asfdagsdf"}

#  rabbitmq:
#   host: 127.0.0.1
#   username: guest
#   password: guest
#
#queue:
#    loginLog:
#      name: LoginLogQueue
  #打印sql
logging:
    level:
      com.xy.user.mapper: debug

server:
  port: 8100 #运行端口号
eureka:
  instance:
    hostname: localhost #指定主机地址
    instance-id: ${spring.cloud.client.ip-address}:${server.port} # 注册时 作为一个eureka实例 id带有 ip地址 和 端口号
  client:
#    healthcheck:
#      enabled: true
    register-with-eureka: true #注册到Eureka的注册中心
    fetch-registry: true #获取注册实例列表
    service-url:
      defaultZone:  http://localhost:8761/eureka #配置注册中心地址
    registry-fetch-interval-seconds: 5 # 设置服务消费者从注册中心拉取服务列表的间隔

#生成用
mybatis-plus:
  type-aliases-package: com.xy.model
  mapper-locations: classpath*:/mapper/**/*.xml

# Ribbon的常用配置
ribbon:
  ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
  OkToRetryOnAllOperations: true #对超时请求启用重试机制
  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
  MaxAutoRetries: 1 # 切换实例后重试最大次数
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #修改负载均衡算法

